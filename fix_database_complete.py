import os
from sqlalchemy import create_engine, text

# Configuraci√≥n - usando la URL de producci√≥n de Render
DATABASE_URL = "postgresql://losdelfondosql_user:PvDDXaQUDSmRWaa4yL3Fq2zC1BkmRtAn@dpg-d16b2kumcj7s73bv3peg-a.oregon-postgres.render.com/losdelfondosql"
engine = create_engine(DATABASE_URL)

def fix_database():
    print("üîß MIGRACI√ìN COMPLETA DE BASE DE DATOS")
    print("Arreglando todas las columnas faltantes...\n")
    
    try:
        with engine.connect() as conn:
            # ===== TABLA USUARIOS =====
            print("üë§ Arreglando tabla USUARIOS...")
            
            # Verificar columnas existentes en usuarios
            result = conn.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'usuarios' AND column_name IN ('created_at', 'is_active')
            """))
            existing_user_columns = [row[0] for row in result.fetchall()]
            
            # Agregar created_at a usuarios
            if 'created_at' not in existing_user_columns:
                print("  ‚ûï Agregando usuarios.created_at...")
                conn.execute(text("""
                    ALTER TABLE usuarios 
                    ADD COLUMN created_at TIMESTAMP DEFAULT NOW()
                """))
                print("  ‚úÖ usuarios.created_at agregada")
            else:
                print("  ‚ÑπÔ∏è  usuarios.created_at ya existe")
            
            # Agregar is_active a usuarios
            if 'is_active' not in existing_user_columns:
                print("  ‚ûï Agregando usuarios.is_active...")
                conn.execute(text("""
                    ALTER TABLE usuarios 
                    ADD COLUMN is_active BOOLEAN DEFAULT TRUE
                """))
                print("  ‚úÖ usuarios.is_active agregada")
            else:
                print("  ‚ÑπÔ∏è  usuarios.is_active ya existe")
            
            # Actualizar valores NULL en usuarios
            conn.execute(text("""
                UPDATE usuarios 
                SET created_at = NOW() 
                WHERE created_at IS NULL
            """))
            
            conn.execute(text("""
                UPDATE usuarios 
                SET is_active = TRUE 
                WHERE is_active IS NULL
            """))
            
            # ===== TABLA VISITAS =====
            print("\nüìä Arreglando tabla VISITAS...")
            
            # Verificar si la tabla visitas existe
            result = conn.execute(text("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_name = 'visitas'
                )
            """))
            table_exists = result.fetchone()[0]
            
            if not table_exists:
                print("  ‚ûï Creando tabla visitas completa...")
                conn.execute(text("""
                    CREATE TABLE visitas (
                        id SERIAL PRIMARY KEY,
                        ip_address VARCHAR(45) NOT NULL,
                        user_agent TEXT,
                        fecha_visita TIMESTAMP DEFAULT NOW() NOT NULL,
                        pagina_visitada VARCHAR(255),
                        usuario_id INTEGER
                    )
                """))
                print("  ‚úÖ Tabla visitas creada")
            else:
                # Verificar columnas existentes en visitas
                result = conn.execute(text("""
                    SELECT column_name 
                    FROM information_schema.columns 
                    WHERE table_name = 'visitas' AND column_name = 'fecha_visita'
                """))
                existing_visit_columns = [row[0] for row in result.fetchall()]
                
                # Agregar fecha_visita a visitas si no existe
                if 'fecha_visita' not in existing_visit_columns:
                    print("  ‚ûï Agregando visitas.fecha_visita...")
                    conn.execute(text("""
                        ALTER TABLE visitas 
                        ADD COLUMN fecha_visita TIMESTAMP DEFAULT NOW() NOT NULL
                    """))
                    print("  ‚úÖ visitas.fecha_visita agregada")
                else:
                    print("  ‚ÑπÔ∏è  visitas.fecha_visita ya existe")
            
            conn.commit()
            print("\nüíæ Todos los cambios guardados exitosamente")
            
            # ===== VERIFICACI√ìN FINAL =====
            print("\nüìã VERIFICACI√ìN FINAL:")
            
            # Verificar estructura de usuarios
            print("\nüë§ Estructura de tabla USUARIOS:")
            result = conn.execute(text("""
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_name = 'usuarios' 
                ORDER BY ordinal_position
            """))
            
            for row in result:
                nullable = "NULL" if row[2] == "YES" else "NOT NULL"
                default = f" DEFAULT {row[3]}" if row[3] else ""
                print(f"  üìå {row[0]}: {row[1]} {nullable}{default}")
            
            # Verificar estructura de visitas
            print("\nüìä Estructura de tabla VISITAS:")
            result = conn.execute(text("""
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_name = 'visitas' 
                ORDER BY ordinal_position
            """))
            
            for row in result:
                nullable = "NULL" if row[2] == "YES" else "NOT NULL"
                default = f" DEFAULT {row[3]}" if row[3] else ""
                print(f"  üìå {row[0]}: {row[1]} {nullable}{default}")
                
    except Exception as e:
        print(f"‚ùå Error durante la migraci√≥n: {e}")
        return False
    
    return True

if __name__ == "__main__":
    print("üöÄ SCRIPT DE MIGRACI√ìN COMPLETA DE BASE DE DATOS")
    print("Este script arreglar√° TODAS las columnas faltantes en producci√≥n.")
    print("\nüîç Problemas detectados:")
    print("  - usuarios.created_at no existe")
    print("  - usuarios.is_active no existe")
    print("  - visitas.fecha_visita no existe")
    print("\n‚ö†Ô∏è  IMPORTANTE: Este script modificar√° la base de datos de producci√≥n.")
    
    confirm = input("\n¬øContinuar con la migraci√≥n? (s/N): ").lower().strip()
    
    if confirm in ['s', 'si', 's√≠', 'y', 'yes']:
        success = fix_database()
        
        if success:
            print("\nüéâ ¬°MIGRACI√ìN COMPLETADA EXITOSAMENTE!")
            print("‚úÖ Todas las columnas faltantes han sido agregadas")
            print("‚úÖ Los datos existentes se mantuvieron intactos")
            print("‚úÖ La aplicaci√≥n ahora deber√≠a funcionar correctamente")
            print("üîÑ Render redesplegar√° autom√°ticamente la aplicaci√≥n")
            print("\nüöÄ Tu aplicaci√≥n estar√° lista en unos minutos.")
        else:
            print("\n‚ùå Hubo problemas durante la migraci√≥n.")
            print("üîç Revisa los errores anteriores.")
            print("üí¨ Si el problema persiste, contacta soporte.")
    else:
        print("\n‚ùå Migraci√≥n cancelada.")
        print("‚ö†Ô∏è  Los errores de base de datos continuar√°n hasta que ejecutes la migraci√≥n.")